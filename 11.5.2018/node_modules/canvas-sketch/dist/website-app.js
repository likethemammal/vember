require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({159:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/** @jsx h */
var Router = require('preact-router');

var _require = require('preact'),
    h = _require.h,
    render = _require.render;

var _require2 = require('preact-router/match'),
    Link = _require2.Link;

var Canvas = require('./components/Canvas');

var Examples = require('./components/Examples');

var gitHubUrl = 'https://github.com/mattdesl/canvas-sketch';
var gitHubUrlDocs = 'https://github.com/mattdesl/canvas-sketch/blob/master/docs/README.md';

var Navbar = function Navbar() {
  return h("div", {
    className: "top-nav"
  }, h("header", null, h(Link, {
    href: "/",
    className: "title"
  }, "canvas-sketch"), h("nav", null, h(Link, {
    activeClassName: "active",
    href: "/examples"
  }, "examples"), h("a", {
    target: "_blank",
    href: gitHubUrlDocs,
    className: "external"
  }, "docs"), h("a", {
    target: "_blank",
    href: gitHubUrl,
    className: "external"
  }, "code"))));
};

var Footer = function Footer() {
  return h("footer", null, h("div", {
    className: "rotated-brief"
  }, "a toolkit for generative art"), h("hr", {
    className: "right"
  }));
};

var Home = function Home() {
  return h("main", {
    className: "landing"
  }, h("p", null, h("strong", null, "canvas-sketch"), " is a loose collection of tools, modules, and resources for creating generative art in JavaScript and the browser."), h("p", null, "It can be used to render high-quality PNG images for Gicl\xE9e prints, create real-time web graphics (such as this page's background), export image sequences for GIF and MP4 loops, generate SVG files for pen plotters (like AxiDraw), automatically git hash your artworks for long-term archiving, and more."), h("p", null, "To get started, check out the ", h("a", {
    target: "_blank",
    href: gitHubUrlDocs
  }, "documentation"), ", or browse through ", h(Link, {
    href: "/examples"
  }, "some examples"), ", or view the ", h("a", {
    target: "_blank",
    href: gitHubUrl
  }, "source code"), " on GitHub."));
};

var Docs = function Docs() {
  return h("main", null, "Docs...");
};

var Content =
/*#__PURE__*/
function (_Router) {
  _inherits(Content, _Router);

  function Content() {
    _classCallCheck(this, Content);

    return _possibleConstructorReturn(this, _getPrototypeOf(Content).apply(this, arguments));
  }

  _createClass(Content, [{
    key: "render",
    value: function render(props, state) {
      var isHome = state.url === '/';
      return h("div", {
        className: "content-layer"
      }, h(Canvas, {
        active: isHome
      }), h(Navbar, null), _get(_getPrototypeOf(Content.prototype), "render", this).call(this, props, state), isHome && h(Footer, null));
    }
  }]);

  return Content;
}(Router);

var App = function App(props, context) {
  return h("div", {
    className: "app"
  }, h(Content, null, h(Home, {
    path: "/"
  }), h(Examples, {
    path: "/examples/:name?"
  })));
};

render(h(App, null), document.body);

},{"./components/Canvas":153,"./components/Examples":154,"preact":126,"preact-router":124,"preact-router/match":125}],154:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/** @jsx h */
var classnames = require('classnames');

var _require = require('preact-router'),
    route = _require.route;

var _require2 = require('preact'),
    h = _require2.h,
    Component = _require2.Component;

var _require3 = require('preact-router/match'),
    Link = _require3.Link;

var _require4 = require('../data'),
    examples = _require4.examples;

var cachedSource = {};

var getSource = function getSource(name) {
  var url = "/examples/".concat(name, ".js");
  if (url in cachedSource) return cachedSource[url];
  var p = window.fetch(url).then(function (resp) {
    return resp.text();
  });
  cachedSource[url] = p;
  return p;
};

var ExampleItem = function ExampleItem(props) {
  var baseUrl = '/examples';
  var url = "".concat(baseUrl, "/").concat(props.name);
  return h("li", null, h(Link, {
    activeClassName: "active",
    href: url
  }, props.title));
};

var View =
/*#__PURE__*/
function (_Component) {
  _inherits(View, _Component);

  function View(props) {
    var _this;

    _classCallCheck(this, View);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));
    _this.state = {
      loading: false,
      code: ''
    };
    return _this;
  }

  _createClass(View, [{
    key: "loadSketch",
    value: function loadSketch(props) {
      var _this2 = this;

      var name = props.name; // If we have a name, start loading

      var loading = Boolean(name);
      this.setState({
        loading: loading,
        code: ''
      });
      getSource(name).then(function (code) {
        _this2.setState({
          loading: false,
          code: code
        });
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(props, state) {
      this.loadSketch(props);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.loadSketch(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.element && window.hljs && this.state.code && this.element.parentElement) {
        this.element.innerHTML = this.state.code;
        window.hljs.highlightBlock(this.element.parentElement);
      }
    }
  }, {
    key: "render",
    value: function render(props) {
      var _this3 = this;

      var name = props.name; // User selected an example

      if (name) {
        if (name in examples.map) {
          // Sketch exists!
          var code = this.state.code;

          if (code) {
            var sketch = examples.map[name];
            var classes = classnames('code', {
              loading: !code
            });
            return h("div", {
              className: "sketch-view"
            }, h("iframe", {
              className: "sketch",
              src: "examples/build/".concat(sketch.name, ".html"),
              width: "100%",
              height: "100%"
            }), h("div", {
              className: classes
            }, h("pre", null, h("code", {
              className: "js",
              ref: function ref(c) {
                _this3.element = c;
              }
            }))));
          } else {
            return h("div", {
              className: "sketch-view no-sketch"
            }, h("p", null, "loading"));
          }
        } else {
          // Sketch doesn't exist
          console.warn("Could not find example by id ".concat(name));
          return h("div", {
            className: "sketch-view no-sketch"
          }, h("p", null, "No sketch found by the name ", h("strong", null, name), ","), h("p", null, "try choosing a different one from the list"));
        }
      }

      return h("div", {
        className: "sketch-view no-sketch"
      }, h("p", null, "Choose a sketch from the list to begin."));
    }
  }]);

  return View;
}(Component);

module.exports = function (props, context) {
  var sections = examples.data.map(function (section) {
    if (!section.name) throw new Error('Missing "name" field in section from examples-data.json');
    var itemData = section.items || [];
    var items = itemData.filter(function (d) {
      return d.visible !== false;
    }).map(function (data) {
      return h(ExampleItem, _extends({}, data, {
        name: data.name
      }));
    });
    if (items.length === 0) return null;
    return h("ul", {
      className: "examples"
    }, h("div", {
      className: "list-section-header"
    }, section.title), items);
  }).filter(Boolean);
  var name = props.matches.name || '';
  var view = h(View, {
    name: name
  });
  return h("main", {
    className: "split-view"
  }, h("div", {
    className: "list-view"
  }, h("div", {
    className: "list-view-scroll"
  }, sections)), view);
};

},{"../data":158,"classnames":35,"preact":126,"preact-router":124,"preact-router/match":125}],158:[function(require,module,exports){
"use strict";

var getSectionData = require('./getSectionData');

var examplesData = require('./examples-data.json');

module.exports.examples = getSectionData(examplesData);

},{"./examples-data.json":156,"./getSectionData":157}],157:[function(require,module,exports){
"use strict";

module.exports = function (data) {
  var list = data.map(function (s) {
    return s.items;
  }).reduce(function (a, b) {
    return a.concat(b);
  }, []);
  var map = list.reduce(function (dict, item) {
    if (item.name in dict) throw new Error("Multiple items with the same name: ".concat(item.name));
    dict[item.name] = item;
    return dict;
  }, {});
  return {
    data: data,
    map: map,
    list: list
  };
};

},{}],156:[function(require,module,exports){
module.exports=[
  {
    "title": "Prints",
    "name": "prints",
    "items": [
      {
        "name": "canvas-10-print",
        "title": "10 PRINT"
      },
      {
        "name": "canvas-dot-flower",
        "title": "Dot Flower Business Card"
      },
      {
        "name": "canvas-generative-silhouette",
        "title": "Generative Silhouette"
      },
      {
        "name": "canvas-generative-arcs",
        "title": "Generative Arcs"
      },
      {
        "name": "canvas-abstract-risograph-print",
        "title": "Abstract Risograph Print"
      }
    ]
  },
  {
    "title": "Animated",
    "name": "animated",
    "items": [
      {
        "name": "animated-grid",
        "title": "2D Grid Animation"
      },
      {
        "name": "animated-scribble-curves",
        "title": "Scribble Curves"
      },
      {
        "name": "animated-regl-dither-blob",
        "title": "Dither Blob (WebGL/Regl)"
      },
      {
        "name": "animated-regl-fullscreen-shader",
        "title": "Fullscreen Shader (WebGL/Regl)"
      },
      {
        "name": "animated-simple-2d",
        "title": "Simple 2D Animation"
      },
      {
        "name": "animated-p5",
        "title": "Basic p5.js Integration"
      },
      {
        "name": "animated-three-basic-cube",
        "title": "Basic Three.js Integration"
      }
    ]
  },
  {
    "title": "Media",
    "name": "media",
    "items": [
      {
        "name": "canvas-image-processing",
        "title": "Image Processing"
      }
    ]
  },
  {
    "title": "Tests",
    "name": "tests",
    "items": [
      {
        "name": "canvas-pixel-processing",
        "title": "Per-Pixel Processing"
      }
    ]
  }
]

},{}],153:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/** @jsx h */
var _require = require('preact'),
    h = _require.h,
    Component = _require.Component; // Grab our sketch & settings


var sketch = require('./background-sketch'); // The actual canvas-sketch library


var canvasSketch = require('canvas-sketch'); // Utility for preact className


var classnames = require('classnames');

module.exports =
/*#__PURE__*/
function (_Component) {
  _inherits(Canvas, _Component);

  function Canvas() {
    _classCallCheck(this, Canvas);

    return _possibleConstructorReturn(this, _getPrototypeOf(Canvas).apply(this, arguments));
  }

  _createClass(Canvas, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Since we render() the canvas, it will be the 'base' element
      var canvas = this.base; // Setup a new canvas-sketch

      this.sketch = canvasSketch(sketch, Object.assign({}, sketch.settings, {
        canvas: canvas
      }));

      this._handleActive(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      this._handleActive(newProps);
    }
  }, {
    key: "_handleActive",
    value: function _handleActive(newProps) {
      this.sketch.then(function (sketch) {
        if (newProps.active && !sketch.playing) sketch.play();else sketch.stop();
      });
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(newProps) {
      return newProps.active !== this.props.active;
    }
  }, {
    key: "render",
    value: function render() {
      var className = classnames('background-canvas', {
        active: this.props.active
      });
      return h("canvas", {
        className: className
      });
    }
  }]);

  return Canvas;
}(Component);

},{"./background-sketch":155,"canvas-sketch":1,"classnames":35,"preact":126}],155:[function(require,module,exports){
"use strict";

var _require = require('../../../examples/util/math'),
    clamp01 = _require.clamp01,
    linspace = _require.linspace;

var Painter = require('../../../examples/util/canvas-painter');

var Random = require('../../../examples/util/random');

var tween = require('../../../examples/util/tween');

var _require2 = require('gl-matrix'),
    vec2 = _require2.vec2;

var settings = {
  animate: true,
  hotkeys: false
};

var sketch = function sketch(app) {
  var friction = 0.98;
  var particleCount = 300;
  var maxConnections = 5;
  var currentSpawnInterval = 0;
  var currentSpawnTime = 0; // Simple utility for 2D line/circle drawing

  var painter = Painter(app.context); // Create a list of 'particle' objects

  var particles = Array.from(new Array(particleCount)).map(function () {
    return {// We'll fill in the properties dynamically in spawn()
    };
  });

  var nextParticle = function nextParticle() {
    return particles.find(function (p) {
      return !p.active;
    });
  };

  var spawn = function spawn() {
    var particle = nextParticle();
    if (!particle) return; // none left in pool
    // Mark particle as active, no longer in pool

    particle.active = true; // Reset time

    particle.time = 0; // Choose a new position, we are in 0..1 space here

    var center = [0.5, 0.5];
    var scale = 0.4;
    var offset = Random.gaussian(0, 0.05);
    particle.position = vec2.add([], Random.onSquare(scale + offset), center); // Set some new random properties

    particle.duration = Random.range(3, 5);
    particle.radius = Random.range(1, 2);
    particle.connectionRadius = Random.range(0.1, 0.2);
    particle.speed = 1 / 1000;
    particle.animationDuration = 1; // Use a random point on unit circle to get a random velocity vector

    particle.velocity = Random.onCircle(1, particle.velocity);
    return particle;
  };

  var spawnMultiple = function spawnMultiple() {
    var count = Random.rangeFloor(1, 6);

    for (var i = 0; i < count; i++) {
      spawn();
    }
  };

  var tick = function tick(_ref) {
    var deltaTime = _ref.deltaTime,
        width = _ref.width,
        height = _ref.height;
    currentSpawnTime += deltaTime;

    if (currentSpawnTime > currentSpawnInterval) {
      currentSpawnTime = 0;
      currentSpawnInterval = Random.range(0.25, 0.35);
      spawnMultiple();
    }

    particles.forEach(function (particle) {
      if (!particle.active) return; // ignore dead/unused particles

      particle.time += deltaTime;

      if (particle.time > particle.duration) {
        particle.active = false;
        return;
      } // Move along velocity


      vec2.scaleAndAdd(particle.position, particle.position, particle.velocity, particle.speed);
      vec2.scale(particle.velocity, particle.velocity, friction);
    });
  };

  var render = function render(_ref2) {
    var context = _ref2.context,
        deltaTime = _ref2.deltaTime,
        width = _ref2.width,
        height = _ref2.height;
    painter.clear({
      fill: 'white',
      width: width,
      height: height
    });
    context.save(); // Update & draw each particle

    particles.forEach(function (particle) {
      // Skip inactive particles
      if (!particle.active) return;
      var size = particle.radius * tween({
        time: particle.time,
        ease: 'quadOut',
        edge: particle.animationDuration,
        duration: particle.duration
      }); // Paint circle

      painter.circle({
        alpha: 0.2,
        position: [particle.position[0] * width, particle.position[1] * height],
        radius: size
      }); // Paint connections

      var connectionRadius = particle.connectionRadius;

      for (var i = 0, c = 0; i < particles.length && c < maxConnections; i++) {
        var other = particles[i];
        if (other === particle || !other.active) continue; // skip self

        var dist = vec2.distance(other.position, particle.position);

        if (dist <= connectionRadius) {
          var distStr = Math.sin(Math.PI * clamp01(dist / connectionRadius)); // Need to map from 0..1 to 0..screenSize

          var positions = [particle.position, other.position].map(function (p) {
            return [p[0] * width, p[1] * height];
          });
          painter.polyline(positions, {
            alpha: 0.2 * distStr,
            stroke: 'black',
            lineWidth: 0.25 * distStr
          });
          c++;
        }
      }
    });
    context.restore();
  };

  return {
    render: render,
    tick: tick
  };
};

module.exports = sketch;
module.exports.settings = settings;

},{"../../../examples/util/canvas-painter":16,"../../../examples/util/math":18,"../../../examples/util/random":19,"../../../examples/util/tween":20,"gl-matrix":83}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Link = exports.Match = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _preact = require('preact');

var _preactRouter = require('preact-router');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Match = exports.Match = function (_Component) {
	_inherits(Match, _Component);

	function Match() {
		var _temp, _this, _ret;

		_classCallCheck(this, Match);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.update = function (url) {
			_this.nextUrl = url;
			_this.setState({});
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	Match.prototype.componentDidMount = function componentDidMount() {
		_preactRouter.subscribers.push(this.update);
	};

	Match.prototype.componentWillUnmount = function componentWillUnmount() {
		_preactRouter.subscribers.splice(_preactRouter.subscribers.indexOf(this.update) >>> 0, 1);
	};

	Match.prototype.render = function render(props) {
		var url = this.nextUrl || (0, _preactRouter.getCurrentUrl)(),
		    path = url.replace(/\?.+$/, '');
		this.nextUrl = null;
		return props.children[0] && props.children[0]({
			url: url,
			path: path,
			matches: path === props.path
		});
	};

	return Match;
}(_preact.Component);

var Link = function Link(_ref) {
	var activeClassName = _ref.activeClassName,
	    path = _ref.path,
	    props = _objectWithoutProperties(_ref, ['activeClassName', 'path']);

	return (0, _preact.h)(
		Match,
		{ path: path || props.href },
		function (_ref2) {
			var matches = _ref2.matches;
			return (0, _preact.h)(_preactRouter.Link, _extends({}, props, { 'class': [props.class || props.className, matches && activeClassName].filter(Boolean).join(' ') }));
		}
	);
};

exports.Link = Link;
exports.default = Match;

Match.Link = Link;

},{"preact":126,"preact-router":124}],124:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("preact")):"function"==typeof define&&define.amd?define(["preact"],e):t.preactRouter=e(t.preact)}(this,function(t){function e(t,e){for(var n in e)t[n]=e[n];return t}function n(t,e,n){var r,o=/(?:\?([^#]*))?(#.*)?$/,u=t.match(o),a={};if(u&&u[1])for(var p=u[1].split("&"),c=0;c<p.length;c++){var f=p[c].split("=");a[decodeURIComponent(f[0])]=decodeURIComponent(f.slice(1).join("="))}t=i(t.replace(o,"")),e=i(e||"");for(var l=Math.max(t.length,e.length),s=0;s<l;s++)if(e[s]&&":"===e[s].charAt(0)){var h=e[s].replace(/(^\:|[+*?]+$)/g,""),d=(e[s].match(/[+*?]+$/)||C)[0]||"",g=~d.indexOf("+"),m=~d.indexOf("*"),y=t[s]||"";if(!y&&!m&&(d.indexOf("?")<0||g)){r=!1;break}if(a[h]=decodeURIComponent(y),g||m){a[h]=t.slice(s).map(decodeURIComponent).join("/");break}}else if(e[s]!==t[s]){r=!1;break}return(!0===n.default||!1!==r)&&a}function r(t,e){return t.rank<e.rank?1:t.rank>e.rank?-1:t.index-e.index}function o(t,e){return t.index=e,t.rank=p(t),t.attributes}function i(t){return t.replace(/(^\/+|\/+$)/g,"").split("/")}function u(t){return":"==t.charAt(0)?1+"*+?".indexOf(t.charAt(t.length-1))||4:5}function a(t){return i(t).map(u).join("")}function p(t){return t.attributes.default?0:a(t.attributes.path)}function c(t){return null!=t.__preactattr_||"undefined"!=typeof Symbol&&null!=t[Symbol.for("preactattr")]}function f(t,e){void 0===e&&(e="push"),R&&R[e]?R[e](t):"undefined"!=typeof history&&history[e+"State"]&&history[e+"State"](null,null,t)}function l(){var t;return t=R&&R.location?R.location:R&&R.getCurrentLocation?R.getCurrentLocation():"undefined"!=typeof location?location:x,""+(t.pathname||"")+(t.search||"")}function s(t,e){return void 0===e&&(e=!1),"string"!=typeof t&&t.url&&(e=t.replace,t=t.url),h(t)&&f(t,e?"replace":"push"),d(t)}function h(t){for(var e=U.length;e--;)if(U[e].canRoute(t))return!0;return!1}function d(t){for(var e=!1,n=0;n<U.length;n++)!0===U[n].routeTo(t)&&(e=!0);for(var r=k.length;r--;)k[r](t);return e}function g(t){if(t&&t.getAttribute){var e=t.getAttribute("href"),n=t.getAttribute("target");if(e&&e.match(/^\//g)&&(!n||n.match(/^_?self$/i)))return s(e)}}function m(t){if(0==t.button)return g(t.currentTarget||t.target||this),y(t)}function y(t){return t&&(t.stopImmediatePropagation&&t.stopImmediatePropagation(),t.stopPropagation&&t.stopPropagation(),t.preventDefault()),!1}function v(t){if(!(t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||0!==t.button)){var e=t.target;do{if("A"===(e.nodeName+"").toUpperCase()&&e.getAttribute("href")&&c(e)){if(e.hasAttribute("native"))return;if(g(e))return y(t)}}while(e=e.parentNode)}}function b(){_||("function"==typeof addEventListener&&(R||addEventListener("popstate",function(){d(l())}),addEventListener("click",v)),_=!0)}var C={},R=null,U=[],k=[],x={},_=!1,A=function(i){function u(t){i.call(this,t),t.history&&(R=t.history),this.state={url:t.url||l()},b()}return i&&(u.__proto__=i),u.prototype=Object.create(i&&i.prototype),u.prototype.constructor=u,u.prototype.shouldComponentUpdate=function(t){return!0!==t.static||(t.url!==this.props.url||t.onChange!==this.props.onChange)},u.prototype.canRoute=function(t){return this.getMatchingChildren(this.props.children,t,!1).length>0},u.prototype.routeTo=function(t){return this._didRoute=!1,this.setState({url:t}),this.updating?this.canRoute(t):(this.forceUpdate(),this._didRoute)},u.prototype.componentWillMount=function(){U.push(this),this.updating=!0},u.prototype.componentDidMount=function(){var t=this;R&&(this.unlisten=R.listen(function(e){t.routeTo(""+(e.pathname||"")+(e.search||""))})),this.updating=!1},u.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),U.splice(U.indexOf(this),1)},u.prototype.componentWillUpdate=function(){this.updating=!0},u.prototype.componentDidUpdate=function(){this.updating=!1},u.prototype.getMatchingChildren=function(i,u,a){return i.filter(o).sort(r).map(function(r){var o=n(u,r.attributes.path,r.attributes);if(o){if(!1!==a){var i={url:u,matches:o};return e(i,o),delete i.ref,delete i.key,t.cloneElement(r,i)}return r}}).filter(Boolean)},u.prototype.render=function(t,e){var n=t.children,r=t.onChange,o=e.url,i=this.getMatchingChildren(n,o,!0),u=i[0]||null;this._didRoute=!!u;var a=this.previousUrl;return o!==a&&(this.previousUrl=o,"function"==typeof r&&r({router:this,url:o,previous:a,active:i,current:u})),u},u}(t.Component),I=function(n){return t.h("a",e({onClick:m},n))},L=function(e){return t.h(e.component,e)};return A.subscribers=k,A.getCurrentUrl=l,A.route=s,A.Router=A,A.Route=L,A.Link=I,A});


},{"preact":126}],126:[function(require,module,exports){
!function() {
    'use strict';
    function VNode() {}
    function h(nodeName, attributes) {
        var lastSimple, child, simple, i, children = EMPTY_CHILDREN;
        for (i = arguments.length; i-- > 2; ) stack.push(arguments[i]);
        if (attributes && null != attributes.children) {
            if (!stack.length) stack.push(attributes.children);
            delete attributes.children;
        }
        while (stack.length) if ((child = stack.pop()) && void 0 !== child.pop) for (i = child.length; i--; ) stack.push(child[i]); else {
            if ('boolean' == typeof child) child = null;
            if (simple = 'function' != typeof nodeName) if (null == child) child = ''; else if ('number' == typeof child) child = String(child); else if ('string' != typeof child) simple = !1;
            if (simple && lastSimple) children[children.length - 1] += child; else if (children === EMPTY_CHILDREN) children = [ child ]; else children.push(child);
            lastSimple = simple;
        }
        var p = new VNode();
        p.nodeName = nodeName;
        p.children = children;
        p.attributes = null == attributes ? void 0 : attributes;
        p.key = null == attributes ? void 0 : attributes.key;
        if (void 0 !== options.vnode) options.vnode(p);
        return p;
    }
    function extend(obj, props) {
        for (var i in props) obj[i] = props[i];
        return obj;
    }
    function cloneElement(vnode, props) {
        return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
    }
    function enqueueRender(component) {
        if (!component.__d && (component.__d = !0) && 1 == items.push(component)) (options.debounceRendering || defer)(rerender);
    }
    function rerender() {
        var p, list = items;
        items = [];
        while (p = list.pop()) if (p.__d) renderComponent(p);
    }
    function isSameNodeType(node, vnode, hydrating) {
        if ('string' == typeof vnode || 'number' == typeof vnode) return void 0 !== node.splitText;
        if ('string' == typeof vnode.nodeName) return !node._componentConstructor && isNamedNode(node, vnode.nodeName); else return hydrating || node._componentConstructor === vnode.nodeName;
    }
    function isNamedNode(node, nodeName) {
        return node.__n === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
    }
    function getNodeProps(vnode) {
        var props = extend({}, vnode.attributes);
        props.children = vnode.children;
        var defaultProps = vnode.nodeName.defaultProps;
        if (void 0 !== defaultProps) for (var i in defaultProps) if (void 0 === props[i]) props[i] = defaultProps[i];
        return props;
    }
    function createNode(nodeName, isSvg) {
        var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
        node.__n = nodeName;
        return node;
    }
    function removeNode(node) {
        var parentNode = node.parentNode;
        if (parentNode) parentNode.removeChild(node);
    }
    function setAccessor(node, name, old, value, isSvg) {
        if ('className' === name) name = 'class';
        if ('key' === name) ; else if ('ref' === name) {
            if (old) old(null);
            if (value) value(node);
        } else if ('class' === name && !isSvg) node.className = value || ''; else if ('style' === name) {
            if (!value || 'string' == typeof value || 'string' == typeof old) node.style.cssText = value || '';
            if (value && 'object' == typeof value) {
                if ('string' != typeof old) for (var i in old) if (!(i in value)) node.style[i] = '';
                for (var i in value) node.style[i] = 'number' == typeof value[i] && !1 === IS_NON_DIMENSIONAL.test(i) ? value[i] + 'px' : value[i];
            }
        } else if ('dangerouslySetInnerHTML' === name) {
            if (value) node.innerHTML = value.__html || '';
        } else if ('o' == name[0] && 'n' == name[1]) {
            var useCapture = name !== (name = name.replace(/Capture$/, ''));
            name = name.toLowerCase().substring(2);
            if (value) {
                if (!old) node.addEventListener(name, eventProxy, useCapture);
            } else node.removeEventListener(name, eventProxy, useCapture);
            (node.__l || (node.__l = {}))[name] = value;
        } else if ('list' !== name && 'type' !== name && !isSvg && name in node) {
            setProperty(node, name, null == value ? '' : value);
            if (null == value || !1 === value) node.removeAttribute(name);
        } else {
            var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));
            if (null == value || !1 === value) if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase()); else node.removeAttribute(name); else if ('function' != typeof value) if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value); else node.setAttribute(name, value);
        }
    }
    function setProperty(node, name, value) {
        try {
            node[name] = value;
        } catch (e) {}
    }
    function eventProxy(e) {
        return this.__l[e.type](options.event && options.event(e) || e);
    }
    function flushMounts() {
        var c;
        while (c = mounts.pop()) {
            if (options.afterMount) options.afterMount(c);
            if (c.componentDidMount) c.componentDidMount();
        }
    }
    function diff(dom, vnode, context, mountAll, parent, componentRoot) {
        if (!diffLevel++) {
            isSvgMode = null != parent && void 0 !== parent.ownerSVGElement;
            hydrating = null != dom && !('__preactattr_' in dom);
        }
        var ret = idiff(dom, vnode, context, mountAll, componentRoot);
        if (parent && ret.parentNode !== parent) parent.appendChild(ret);
        if (!--diffLevel) {
            hydrating = !1;
            if (!componentRoot) flushMounts();
        }
        return ret;
    }
    function idiff(dom, vnode, context, mountAll, componentRoot) {
        var out = dom, prevSvgMode = isSvgMode;
        if (null == vnode || 'boolean' == typeof vnode) vnode = '';
        if ('string' == typeof vnode || 'number' == typeof vnode) {
            if (dom && void 0 !== dom.splitText && dom.parentNode && (!dom._component || componentRoot)) {
                if (dom.nodeValue != vnode) dom.nodeValue = vnode;
            } else {
                out = document.createTextNode(vnode);
                if (dom) {
                    if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
                    recollectNodeTree(dom, !0);
                }
            }
            out.__preactattr_ = !0;
            return out;
        }
        var vnodeName = vnode.nodeName;
        if ('function' == typeof vnodeName) return buildComponentFromVNode(dom, vnode, context, mountAll);
        isSvgMode = 'svg' === vnodeName ? !0 : 'foreignObject' === vnodeName ? !1 : isSvgMode;
        vnodeName = String(vnodeName);
        if (!dom || !isNamedNode(dom, vnodeName)) {
            out = createNode(vnodeName, isSvgMode);
            if (dom) {
                while (dom.firstChild) out.appendChild(dom.firstChild);
                if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
                recollectNodeTree(dom, !0);
            }
        }
        var fc = out.firstChild, props = out.__preactattr_, vchildren = vnode.children;
        if (null == props) {
            props = out.__preactattr_ = {};
            for (var a = out.attributes, i = a.length; i--; ) props[a[i].name] = a[i].value;
        }
        if (!hydrating && vchildren && 1 === vchildren.length && 'string' == typeof vchildren[0] && null != fc && void 0 !== fc.splitText && null == fc.nextSibling) {
            if (fc.nodeValue != vchildren[0]) fc.nodeValue = vchildren[0];
        } else if (vchildren && vchildren.length || null != fc) innerDiffNode(out, vchildren, context, mountAll, hydrating || null != props.dangerouslySetInnerHTML);
        diffAttributes(out, vnode.attributes, props);
        isSvgMode = prevSvgMode;
        return out;
    }
    function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
        var j, c, f, vchild, child, originalChildren = dom.childNodes, children = [], keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0;
        if (0 !== len) for (var i = 0; i < len; i++) {
            var _child = originalChildren[i], props = _child.__preactattr_, key = vlen && props ? _child._component ? _child._component.__k : props.key : null;
            if (null != key) {
                keyedLen++;
                keyed[key] = _child;
            } else if (props || (void 0 !== _child.splitText ? isHydrating ? _child.nodeValue.trim() : !0 : isHydrating)) children[childrenLen++] = _child;
        }
        if (0 !== vlen) for (var i = 0; i < vlen; i++) {
            vchild = vchildren[i];
            child = null;
            var key = vchild.key;
            if (null != key) {
                if (keyedLen && void 0 !== keyed[key]) {
                    child = keyed[key];
                    keyed[key] = void 0;
                    keyedLen--;
                }
            } else if (!child && min < childrenLen) for (j = min; j < childrenLen; j++) if (void 0 !== children[j] && isSameNodeType(c = children[j], vchild, isHydrating)) {
                child = c;
                children[j] = void 0;
                if (j === childrenLen - 1) childrenLen--;
                if (j === min) min++;
                break;
            }
            child = idiff(child, vchild, context, mountAll);
            f = originalChildren[i];
            if (child && child !== dom && child !== f) if (null == f) dom.appendChild(child); else if (child === f.nextSibling) removeNode(f); else dom.insertBefore(child, f);
        }
        if (keyedLen) for (var i in keyed) if (void 0 !== keyed[i]) recollectNodeTree(keyed[i], !1);
        while (min <= childrenLen) if (void 0 !== (child = children[childrenLen--])) recollectNodeTree(child, !1);
    }
    function recollectNodeTree(node, unmountOnly) {
        var component = node._component;
        if (component) unmountComponent(component); else {
            if (null != node.__preactattr_ && node.__preactattr_.ref) node.__preactattr_.ref(null);
            if (!1 === unmountOnly || null == node.__preactattr_) removeNode(node);
            removeChildren(node);
        }
    }
    function removeChildren(node) {
        node = node.lastChild;
        while (node) {
            var next = node.previousSibling;
            recollectNodeTree(node, !0);
            node = next;
        }
    }
    function diffAttributes(dom, attrs, old) {
        var name;
        for (name in old) if ((!attrs || null == attrs[name]) && null != old[name]) setAccessor(dom, name, old[name], old[name] = void 0, isSvgMode);
        for (name in attrs) if (!('children' === name || 'innerHTML' === name || name in old && attrs[name] === ('value' === name || 'checked' === name ? dom[name] : old[name]))) setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
    }
    function collectComponent(component) {
        var name = component.constructor.name;
        (components[name] || (components[name] = [])).push(component);
    }
    function createComponent(Ctor, props, context) {
        var inst, list = components[Ctor.name];
        if (Ctor.prototype && Ctor.prototype.render) {
            inst = new Ctor(props, context);
            Component.call(inst, props, context);
        } else {
            inst = new Component(props, context);
            inst.constructor = Ctor;
            inst.render = doRender;
        }
        if (list) for (var i = list.length; i--; ) if (list[i].constructor === Ctor) {
            inst.__b = list[i].__b;
            list.splice(i, 1);
            break;
        }
        return inst;
    }
    function doRender(props, state, context) {
        return this.constructor(props, context);
    }
    function setComponentProps(component, props, opts, context, mountAll) {
        if (!component.__x) {
            component.__x = !0;
            if (component.__r = props.ref) delete props.ref;
            if (component.__k = props.key) delete props.key;
            if (!component.base || mountAll) {
                if (component.componentWillMount) component.componentWillMount();
            } else if (component.componentWillReceiveProps) component.componentWillReceiveProps(props, context);
            if (context && context !== component.context) {
                if (!component.__c) component.__c = component.context;
                component.context = context;
            }
            if (!component.__p) component.__p = component.props;
            component.props = props;
            component.__x = !1;
            if (0 !== opts) if (1 === opts || !1 !== options.syncComponentUpdates || !component.base) renderComponent(component, 1, mountAll); else enqueueRender(component);
            if (component.__r) component.__r(component);
        }
    }
    function renderComponent(component, opts, mountAll, isChild) {
        if (!component.__x) {
            var rendered, inst, cbase, props = component.props, state = component.state, context = component.context, previousProps = component.__p || props, previousState = component.__s || state, previousContext = component.__c || context, isUpdate = component.base, nextBase = component.__b, initialBase = isUpdate || nextBase, initialChildComponent = component._component, skip = !1;
            if (isUpdate) {
                component.props = previousProps;
                component.state = previousState;
                component.context = previousContext;
                if (2 !== opts && component.shouldComponentUpdate && !1 === component.shouldComponentUpdate(props, state, context)) skip = !0; else if (component.componentWillUpdate) component.componentWillUpdate(props, state, context);
                component.props = props;
                component.state = state;
                component.context = context;
            }
            component.__p = component.__s = component.__c = component.__b = null;
            component.__d = !1;
            if (!skip) {
                rendered = component.render(props, state, context);
                if (component.getChildContext) context = extend(extend({}, context), component.getChildContext());
                var toUnmount, base, childComponent = rendered && rendered.nodeName;
                if ('function' == typeof childComponent) {
                    var childProps = getNodeProps(rendered);
                    inst = initialChildComponent;
                    if (inst && inst.constructor === childComponent && childProps.key == inst.__k) setComponentProps(inst, childProps, 1, context, !1); else {
                        toUnmount = inst;
                        component._component = inst = createComponent(childComponent, childProps, context);
                        inst.__b = inst.__b || nextBase;
                        inst.__u = component;
                        setComponentProps(inst, childProps, 0, context, !1);
                        renderComponent(inst, 1, mountAll, !0);
                    }
                    base = inst.base;
                } else {
                    cbase = initialBase;
                    toUnmount = initialChildComponent;
                    if (toUnmount) cbase = component._component = null;
                    if (initialBase || 1 === opts) {
                        if (cbase) cbase._component = null;
                        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, !0);
                    }
                }
                if (initialBase && base !== initialBase && inst !== initialChildComponent) {
                    var baseParent = initialBase.parentNode;
                    if (baseParent && base !== baseParent) {
                        baseParent.replaceChild(base, initialBase);
                        if (!toUnmount) {
                            initialBase._component = null;
                            recollectNodeTree(initialBase, !1);
                        }
                    }
                }
                if (toUnmount) unmountComponent(toUnmount);
                component.base = base;
                if (base && !isChild) {
                    var componentRef = component, t = component;
                    while (t = t.__u) (componentRef = t).base = base;
                    base._component = componentRef;
                    base._componentConstructor = componentRef.constructor;
                }
            }
            if (!isUpdate || mountAll) mounts.unshift(component); else if (!skip) {
                if (component.componentDidUpdate) component.componentDidUpdate(previousProps, previousState, previousContext);
                if (options.afterUpdate) options.afterUpdate(component);
            }
            if (null != component.__h) while (component.__h.length) component.__h.pop().call(component);
            if (!diffLevel && !isChild) flushMounts();
        }
    }
    function buildComponentFromVNode(dom, vnode, context, mountAll) {
        var c = dom && dom._component, originalComponent = c, oldDom = dom, isDirectOwner = c && dom._componentConstructor === vnode.nodeName, isOwner = isDirectOwner, props = getNodeProps(vnode);
        while (c && !isOwner && (c = c.__u)) isOwner = c.constructor === vnode.nodeName;
        if (c && isOwner && (!mountAll || c._component)) {
            setComponentProps(c, props, 3, context, mountAll);
            dom = c.base;
        } else {
            if (originalComponent && !isDirectOwner) {
                unmountComponent(originalComponent);
                dom = oldDom = null;
            }
            c = createComponent(vnode.nodeName, props, context);
            if (dom && !c.__b) {
                c.__b = dom;
                oldDom = null;
            }
            setComponentProps(c, props, 1, context, mountAll);
            dom = c.base;
            if (oldDom && dom !== oldDom) {
                oldDom._component = null;
                recollectNodeTree(oldDom, !1);
            }
        }
        return dom;
    }
    function unmountComponent(component) {
        if (options.beforeUnmount) options.beforeUnmount(component);
        var base = component.base;
        component.__x = !0;
        if (component.componentWillUnmount) component.componentWillUnmount();
        component.base = null;
        var inner = component._component;
        if (inner) unmountComponent(inner); else if (base) {
            if (base.__preactattr_ && base.__preactattr_.ref) base.__preactattr_.ref(null);
            component.__b = base;
            removeNode(base);
            collectComponent(component);
            removeChildren(base);
        }
        if (component.__r) component.__r(null);
    }
    function Component(props, context) {
        this.__d = !0;
        this.context = context;
        this.props = props;
        this.state = this.state || {};
    }
    function render(vnode, parent, merge) {
        return diff(merge, vnode, {}, !1, parent, !1);
    }
    var options = {};
    var stack = [];
    var EMPTY_CHILDREN = [];
    var defer = 'function' == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;
    var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    var items = [];
    var mounts = [];
    var diffLevel = 0;
    var isSvgMode = !1;
    var hydrating = !1;
    var components = {};
    extend(Component.prototype, {
        setState: function(state, callback) {
            var s = this.state;
            if (!this.__s) this.__s = extend({}, s);
            extend(s, 'function' == typeof state ? state(s, this.props) : state);
            if (callback) (this.__h = this.__h || []).push(callback);
            enqueueRender(this);
        },
        forceUpdate: function(callback) {
            if (callback) (this.__h = this.__h || []).push(callback);
            renderComponent(this, 2);
        },
        render: function() {}
    });
    var preact = {
        h: h,
        createElement: h,
        cloneElement: cloneElement,
        Component: Component,
        render: render,
        rerender: rerender,
        options: options
    };
    if ('undefined' != typeof module) module.exports = preact; else self.preact = preact;
}();

},{}],35:[function(require,module,exports){
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],16:[function(require,module,exports){
"use strict";

var defined = require('defined');

var _require = require('./math'),
    expand2D = _require.expand2D;

module.exports = function (context) {
  var paint = function paint() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fill = opt.fill;
    var stroke = opt.stroke;
    var defaultColor = 'black';
    var alpha = defined(opt.alpha, 1); // Default to fill-only

    if (opt.fill == null && opt.stroke == null) fill = true;

    if (fill) {
      var fillAlpha = defined(opt.fillAlpha, 1);
      context.fillStyle = typeof fill === 'boolean' ? defaultColor : fill;
      context.globalAlpha = alpha * fillAlpha;
      context.fill();
    }

    var lineWidth = defined(opt.lineWidth, 1);

    if (stroke && lineWidth > 0) {
      var strokeAlpha = defined(opt.strokeAlpha, 1);
      context.strokeStyle = typeof stroke === 'boolean' ? defaultColor : stroke;
      context.lineWidth = lineWidth;
      context.lineCap = opt.lineCap || 'butt';
      context.lineJoin = opt.lineJoin || 'miter';
      context.miterLimit = defined(opt.miterLimit, 10);
      context.globalAlpha = alpha * strokeAlpha;
      context.stroke();
    }
  };

  var circle = function circle() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    context.beginPath();
    var radius = Math.max(0, defined(opt.radius, 1));
    var position = expand2D(opt.position);
    var arcStart = defined(opt.arcStart, 0);
    var arcEnd = defined(opt.arcEnd, Math.PI * 2);
    context.arc(position[0], position[1], radius, arcStart, arcEnd, false);
    paint(opt);
  };

  var rect = function rect() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    context.beginPath();
    var position = expand2D(opt.position);
    var width = defined(opt.width, 1);
    var height = defined(opt.height, 1);
    context.rect(position[0], position[1], width, height);
    paint(opt);
  };

  var _line = function _line(path) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var defaultToStroke = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    opt = Object.assign({}, opt);

    if (defaultToStroke) {
      if (opt.fill == null && opt.stroke == null) opt.stroke = true;
    }

    context.beginPath();
    path.forEach(function (point) {
      return context.lineTo(point[0], point[1]);
    });
    if (opt.closed) context.closePath();
    paint(opt);
  };

  var polyline = function polyline(path) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _line(path, opt, true);
  };

  var shape = function shape(_shape) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _line(_shape, opt, false);
  };

  var polylines = function polylines(lines) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    lines.forEach(function (path) {
      return polyline(path, opt);
    });
  };

  var clear = function clear() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var position = expand2D(opt.position);
    var width = defined(opt.width, context.canvas.width);
    var height = defined(opt.height, context.canvas.height); // clear first in case we have a translucent fill

    context.clearRect(position[0], position[1], width, height); // now allow user to fill

    if (opt.fill) {
      context.beginPath();
      context.rect(position[0], position[1], width, height);
      paint(opt);
    }
  };

  return {
    clear: clear,
    paint: paint,
    rect: rect,
    circle: circle,
    polyline: polyline,
    polylines: polylines,
    shape: shape
  };
};

},{"./math":18,"defined":41}]},{},[159])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
