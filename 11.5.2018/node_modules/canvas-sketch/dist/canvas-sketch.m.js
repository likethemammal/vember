import convertUnits from 'convert-units';
import isDOM from 'is-dom';
import dateformat from 'dateformat';
import assign from 'object-assign';
import padLeft from 'pad-left';
import defined from 'defined';
import getCanvasContext from 'get-canvas-context';
import rightNow from 'right-now';
import isPromise from 'is-promise';
import deepEqual from 'deep-equal';

var defaultUnits = 'mm';
var data = [['postcard',101.6,152.4],['poster-small',280,430],['poster',460,610],
    ['poster-large',610,910],['business-card',50.8,88.9],['a0',841,1189],['a1',594,
    841],['a2',420,594],['a3',297,420],['a4',210,297],['a5',148,210],['a6',105,148],
    ['a7',74,105],['a8',52,74],['a9',37,52],['a10',26,37],['2a0',1189,1682],['4a0',
    1682,2378],['b0',1000,1414],['b1',707,1000],['b1+',720,1020],['b2',500,707],['b2+',
    520,720],['b3',353,500],['b4',250,353],['b5',176,250],['b6',125,176],['b7',88,
    125],['b8',62,88],['b9',44,62],['b10',31,44],['b11',22,32],['b12',16,22],['c0',
    917,1297],['c1',648,917],['c2',458,648],['c3',324,458],['c4',229,324],['c5',162,
    229],['c6',114,162],['c7',81,114],['c8',57,81],['c9',40,57],['c10',28,40],['c11',
    22,32],['c12',16,22],['half-letter',5.5,8.5,'in'],['letter',8.5,11,'in'],['legal',
    8.5,14,'in'],['junior-legal',5,8,'in'],['ledger',11,17,'in'],['tabloid',11,17,
    'in'],['ansi-a',8.5,11.0,'in'],['ansi-b',11.0,17.0,'in'],['ansi-c',17.0,22.0,
    'in'],['ansi-d',22.0,34.0,'in'],['ansi-e',34.0,44.0,'in'],['arch-a',9,12,'in'],
    ['arch-b',12,18,'in'],['arch-c',18,24,'in'],['arch-d',24,36,'in'],['arch-e',36,
    48,'in'],['arch-e1',30,42,'in'],['arch-e2',26,38,'in'],['arch-e3',27,39,'in']];
var paperSizes = data.reduce(function (dict, preset) {
    var item = {
        units: preset[3] || defaultUnits,
        dimensions: [preset[1],preset[2]]
    };
    dict[preset[0]] = item;
    dict[preset[0].replace(/-/g, ' ')] = item;
    return dict;
}, {})

var availableUnits = ['px','m','cm','mm','in','km','ft'];
function roundFractional(n) {
    return parseFloat(n.toFixed(4));
}

function inchesToPixels(inches, pixelsPerInch) {
    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

    return Math.round(pixelsPerInch * inches);
}

function getDimensionsFromPreset(dimensions, unitsTo, pixelsPerInch) {
    if ( unitsTo === void 0 ) unitsTo = 'px';
    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

    if (typeof dimensions === 'string') {
        var key = dimensions.toLowerCase();
        if (!(key in paperSizes)) {
            throw new Error(("The dimension preset \"" + dimensions + "\" is not supported or could not be found; try using a4, a3, postcard, letter, etc."));
        }
        var preset = paperSizes[key];
        return preset.dimensions.map(function (d) { return convertDistance(d, preset.units, unitsTo, pixelsPerInch); });
    } else {
        return dimensions;
    }
}

function convertDistance(dimension, unitsFrom, unitsTo, pixelsPerInch) {
    if ( unitsFrom === void 0 ) unitsFrom = 'px';
    if ( unitsTo === void 0 ) unitsTo = 'px';
    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

    if (unitsFrom === unitsTo) 
        { return dimension; }
    if (unitsTo === 'px') {
        return toPixels(dimension, unitsFrom, pixelsPerInch);
    } else if (unitsFrom === 'px') {
        var inches = dimension * pixelsPerInch;
        return roundFractional(convertUnits(inches).from('in').to(unitsTo));
    }
    if (availableUnits.includes(unitsFrom) && availableUnits.includes(unitsTo)) {
        return roundFractional(convertUnits(dimension).from(unitsFrom).to(unitsTo));
    } else {
        throw new Error("Unsupported unit specified, try one of the following: m, cm, mm, in, ft");
    }
}

function toPixels(dimension, units, pixelsPerInch) {
    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

    if (typeof units !== 'string') 
        { throw new Error("Invalid unit type, must be a string like 'cm' or 'in'"); }
    if (units === 'px') 
        { return dimension; }
    if (availableUnits.includes(units)) {
        var inches = convertUnits(dimension).from(units).to('in');
        return inchesToPixels(inches, pixelsPerInch);
    } else {
        throw new Error(("Unsupported unit " + units + ", try one of the following: m, cm, mm, in, ft"));
    }
}

function getClientAPI() {
    return typeof window !== 'undefined' && window['canvas-sketch-cli'];
}

function isWebGLContext(ctx) {
    return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';
}

function isCanvas(element) {
    return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';
}

var noop = function () {};
var link;
function saveDataURL(dataURI, opts) {
    if ( opts === void 0 ) opts = {};

    return window.fetch(dataURI).then(function (res) { return res.blob(); }).then(function (blob) { return saveBlob(blob, opts); });
}

function saveBlob(blob, opts) {
    if ( opts === void 0 ) opts = {};

    return new Promise(function (resolve) {
        opts = assign({
            extension: '',
            prefix: '',
            suffix: ''
        }, opts);
        var filename = resolveFilename(opts);
        var client = getClientAPI();
        if (client && typeof client.saveBlob === 'function' && client.output) {
            return client.saveBlob(blob, assign({}, opts, {
                filename: filename
            })).then(function (ev) { return resolve(ev); });
        } else {
            if (!link) 
                { link = document.createElement('a'); }
            link.download = filename;
            link.href = window.URL.createObjectURL(blob);
            link.onclick = (function () {
                link.onclick = noop;
                setTimeout(function () {
                    window.URL.revokeObjectURL(blob);
                    link.removeAttribute('href');
                    resolve({
                        filename: filename,
                        client: false
                    });
                });
            });
            link.click();
        }
    });
}

function saveFile(data, opts) {
    if ( opts === void 0 ) opts = {};

    var parts = Array.isArray(data) ? data : [data];
    var blob = new window.Blob(parts, {
        type: opts.type || ''
    });
    return saveBlob(blob, opts);
}

function getFileName() {
    var dateFormatStr = "yyyy.mm.dd-HH.MM.ss";
    return dateformat(new Date(), dateFormatStr);
}

function resolveFilename(opt) {
    if ( opt === void 0 ) opt = {};

    opt = assign({}, opt);
    if (typeof opt.file === 'function') {
        return opt.file(opt);
    } else if (opt.file) {
        return opt.file;
    }
    var frame = null;
    var extension = '';
    if (typeof opt.extension === 'string') 
        { extension = opt.extension; }
    if (typeof opt.frame === 'number') {
        var totalFrames;
        if (typeof opt.totalFrames === 'number') {
            totalFrames = opt.totalFrames;
        } else {
            totalFrames = Math.max(1000, opt.frame);
        }
        frame = padLeft(String(opt.frame), String(totalFrames).length, '0');
    }
    var layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? ("" + (opt.layer)) : '';
    if (frame != null) {
        return [layerStr,frame].filter(Boolean).join('-') + extension;
    } else {
        var defaultFileName = opt.timeStamp;
        return [opt.prefix,opt.name || defaultFileName,layerStr,opt.hash,opt.suffix].filter(Boolean).join('-') + extension;
    }
}

var isBrowser = function () { return typeof document !== 'undefined'; };
var defaultNodeSize = [300,150];
var SketchManager = function SketchManager() {
    var this$1 = this;

    this._settings = {};
    this._props = {};
    this._sketch = undefined;
    this._raf = null;
    this._lastRedrawResult = undefined;
    this._isP5Resizing = false;
    this._animateHandler = (function () { return this$1.animate(); });
    this._resizeHandler = (function () {
        var oldSizes = this$1._getSizeProps();
        this$1.resize();
        var newSizes = this$1._getSizeProps();
        if (!deepEqual(oldSizes, newSizes)) {
            this$1.render();
        }
    });
    this._exportHandler = (function (ev) {
        if (this$1.settings.hotkeys === false) 
            { return; }
        var client = getClientAPI();
        if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {
            ev.preventDefault();
            if (ev.shiftKey) {
                if (this$1.props.recording) {
                    this$1.endRecord();
                    this$1.play();
                } else 
                    { this$1.record(); }
            } else 
                { this$1.exportFrame(); }
        } else if (ev.keyCode === 32) {
            if (this$1.props.playing) 
                { this$1.pause(); }
             else 
                { this$1.play(); }
        } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {
            ev.preventDefault();
            this$1.exportFrame({
                commit: true
            });
        }
    });
};

var prototypeAccessors = { sketch: { configurable: true },settings: { configurable: true },props: { configurable: true } };
prototypeAccessors.sketch.get = function () {
    return this._sketch;
};
prototypeAccessors.settings.get = function () {
    return this._settings;
};
prototypeAccessors.props.get = function () {
    return this._props;
};
SketchManager.prototype._computePlayhead = function _computePlayhead (currentTime, duration) {
    var hasDuration = typeof duration === 'number' && isFinite(duration);
    return hasDuration ? currentTime / duration : 0;
};
SketchManager.prototype._computeFrame = function _computeFrame (playhead, time, totalFrames, fps) {
    return isFinite(totalFrames) && totalFrames > 1 ? Math.floor(playhead * (totalFrames - 1)) : Math.floor(fps * time);
};
SketchManager.prototype._computeCurrentFrame = function _computeCurrentFrame () {
    return this._computeFrame(this.props.playhead, this.props.time, this.props.totalFrames, this.props.fps);
};
SketchManager.prototype._getSizeProps = function _getSizeProps () {
    var props = this.props;
    return {
        width: props.width,
        height: props.height,
        pixelRatio: props.pixelRatio,
        canvasWidth: props.canvasWidth,
        canvasHeight: props.canvasHeight,
        viewportWidth: props.viewportWidth,
        viewportHeight: props.viewportHeight
    };
};
SketchManager.prototype.run = function run () {
    if (!this.sketch) 
        { throw new Error('should wait until sketch is loaded before trying to play()'); }
    if (this.settings.playing !== false) {
        this.play();
    }
    if (!this.props.started) {
        this._signalBegin();
        this.props.started = true;
    }
    this.tick();
    this.render();
};
SketchManager.prototype.play = function play () {
    var animate = this.settings.animate;
    if ('animation' in this.settings) {
        animate = true;
        console.warn('[canvas-sketch] { animation } has been renamed to { animate }');
    }
    if (!animate) 
        { return; }
    if (!isBrowser()) {
        console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');
        return;
    }
    if (!this.props.started) {
        this._signalBegin();
        this.props.started = true;
    }
    this.props.playing = true;
    if (this._raf != null) 
        { window.cancelAnimationFrame(this._raf); }
    this._lastTime = rightNow();
    this._raf = window.requestAnimationFrame(this._animateHandler);
};
SketchManager.prototype.pause = function pause () {
    if (this.props.recording) 
        { this.endRecord(); }
    this.props.playing = false;
    if (this._raf != null && isBrowser()) 
        { window.cancelAnimationFrame(this._raf); }
};
SketchManager.prototype.stop = function stop () {
    this.pause();
    this.props.frame = 0;
    this.props.playhead = 0;
    this.props.time = 0;
    this.props.deltaTime = 0;
    this.props.started = false;
    this.render();
};
SketchManager.prototype.record = function record () {
        var this$1 = this;

    if (this.props.recording) 
        { return; }
    if (!isBrowser()) {
        console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');
        return;
    }
    this.stop();
    this.props.playing = true;
    this.props.recording = true;
    var frameInterval = 1 / this.props.fps;
    if (this._raf != null) 
        { window.cancelAnimationFrame(this._raf); }
    var tick = function () {
        if (!this$1.props.recording) 
            { return Promise.resolve(); }
        this$1.props.deltaTime = frameInterval;
        this$1.tick();
        return this$1.exportFrame({
            sequence: true
        }).then(function () {
            if (!this$1.props.recording) 
                { return; }
            this$1.props.deltaTime = 0;
            this$1.props.frame++;
            if (this$1.props.frame < this$1.props.totalFrames) {
                this$1.props.time += frameInterval;
                this$1.props.playhead = this$1._computePlayhead(this$1.props.time, this$1.props.duration);
                this$1._raf = window.requestAnimationFrame(tick);
            } else {
                console.log('Finished recording');
                this$1._signalEnd();
                this$1.endRecord();
                this$1.stop();
                this$1.run();
            }
        });
    };
    if (!this.props.started) {
        this._signalBegin();
        this.props.started = true;
    }
    this._raf = window.requestAnimationFrame(tick);
};
SketchManager.prototype._signalBegin = function _signalBegin () {
        var this$1 = this;

    if (this.sketch && typeof this.sketch.begin === 'function') {
        this._wrapContextScale(function () { return this$1.sketch.begin(this$1.props); });
    }
};
SketchManager.prototype._signalEnd = function _signalEnd () {
        var this$1 = this;

    if (this.sketch && typeof this.sketch.end === 'function') {
        this._wrapContextScale(function () { return this$1.sketch.end(this$1.props); });
    }
};
SketchManager.prototype.endRecord = function endRecord () {
    if (this._raf != null && isBrowser()) 
        { window.cancelAnimationFrame(this._raf); }
    this.props.recording = false;
    this.props.deltaTime = 0;
};
SketchManager.prototype.exportFrame = function exportFrame (opt) {
        var this$1 = this;
        if ( opt === void 0 ) opt = {};

    if (!this.sketch) 
        { return Promise.all([]); }
    if (typeof this.sketch.preExport === 'function') {
        this.sketch.preExport();
    }
    var exportOpts = assign({
        sequence: opt.sequence,
        frame: opt.sequence ? this.props.frame : undefined,
        file: this.settings.file,
        name: this.settings.name,
        prefix: this.settings.prefix,
        suffix: this.settings.suffix,
        timeStamp: getFileName(),
        totalFrames: isFinite(this.props.totalFrames) ? Math.max(100, this.props.totalFrames) : 1000
    });
    var client = getClientAPI();
    var p = Promise.resolve();
    if (client && opt.commit && typeof client.commit === 'function') {
        var commitOpts = assign({}, exportOpts);
        var hash = client.commit(commitOpts);
        if (isPromise(hash)) 
            { p = hash; }
         else 
            { p = Promise.resolve(hash); }
    }
    return p.then(function (hash) { return this$1._doExportFrame(assign({}, exportOpts, {
        hash: hash || ''
    })); });
};
SketchManager.prototype._doExportFrame = function _doExportFrame (exportOpts) {
        var this$1 = this;
        if ( exportOpts === void 0 ) exportOpts = {};

    this._props.exporting = true;
    this.resize();
    var drawResult = this.render();
    var canvas = this.props.canvas;
    if (typeof drawResult === 'undefined') {
        drawResult = [canvas];
    }
    drawResult = [].concat(drawResult).filter(Boolean);
    drawResult = drawResult.map(function (result) {
        var hasDataObject = typeof result === 'object' && result && 'data' in result;
        var data = hasDataObject ? result.data : result;
        var opts = hasDataObject ? assign({}, result, {
            data: data
        }) : {
            data: data
        };
        if (isCanvas(data)) {
            return Object.assign(opts, {
                url: data.toDataURL('image/png'),
                extension: '.png',
                type: 'image/png'
            });
        } else {
            return opts;
        }
    });
    this._props.exporting = false;
    this.resize();
    this.render();
    return Promise.all(drawResult.map(function (result, i, layerList) {
        var curOpt = assign({}, exportOpts, result, {
            layer: i,
            totalLayers: layerList.length
        });
        var data = result.data;
        if (result.url) {
            var url = result.url;
            delete curOpt.url;
            return saveDataURL(url, curOpt);
        } else {
            return saveFile(data, curOpt);
        }
    })).then(function (ev) {
        if (ev.length > 0) {
            var eventWithOutput = ev.find(function (e) { return e.outputName; });
            var isClient = ev.some(function (e) { return e.client; });
            var item;
            if (ev.length > 1) 
                { item = ev.length; }
             else if (eventWithOutput) 
                { item = (eventWithOutput.outputName) + "/" + (ev[0].filename); }
             else 
                { item = "" + (ev[0].filename); }
            var ofSeq = '';
            if (exportOpts.sequence) {
                var hasTotalFrames = isFinite(this$1.props.totalFrames);
                ofSeq = hasTotalFrames ? (" (frame " + (exportOpts.frame + 1) + " / " + (this$1.props.totalFrames) + ")") : (" (frame " + (exportOpts.frame) + ")");
            }
            var client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';
            console.log(("%c[" + client + "]%c Exported %c" + item + "%c" + ofSeq), 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');
        }
        if (typeof this$1.sketch.postExport === 'function') {
            this$1.sketch.postExport();
        }
    });
};
SketchManager.prototype._isAutoScale = function _isAutoScale () {
    return !this.props.gl && this.settings.scaleContext !== false;
};
SketchManager.prototype._wrapContextScale = function _wrapContextScale (cb) {
    this._preRender();
    cb();
    this._postRender();
};
SketchManager.prototype._preRender = function _preRender () {
    var props = this.props;
    var autoScale = this._isAutoScale();
    if (autoScale && props.context && !props.p5) {
        props.context.save();
        props.context.scale(props.scaleX, props.scaleY);
    } else if (props.p5) {
        props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);
    }
};
SketchManager.prototype._postRender = function _postRender () {
    var props = this.props;
    var autoScale = this._isAutoScale();
    if (autoScale && props.context && !props.p5) {
        props.context.restore();
    }
    if (props.gl && this.settings.flush !== false && !props.p5) {
        props.gl.flush();
    }
};
SketchManager.prototype.tick = function tick () {
    if (this.sketch && typeof this.sketch.tick === 'function') {
        this._preRender();
        this.sketch.tick(this.props);
        this._postRender();
    }
};
SketchManager.prototype.render = function render () {
    if (this.props.p5) {
        this._lastRedrawResult = undefined;
        this.props.p5.redraw();
        return this._lastRedrawResult;
    } else {
        return this.submitDrawCall();
    }
};
SketchManager.prototype.submitDrawCall = function submitDrawCall () {
    if (!this.sketch) 
        { return; }
    var props = this.props;
    this._preRender();
    var drawResult;
    if (typeof this.sketch === 'function') {
        drawResult = this.sketch(props);
    } else if (typeof this.sketch.render === 'function') {
        drawResult = this.sketch.render(props);
    }
    this._postRender();
    return drawResult;
};
SketchManager.prototype.update = function update (opt) {
        var this$1 = this;
        if ( opt === void 0 ) opt = {};

    var notYetSupported = ['frame','time','duration','totalFrames','fps','playing',
        'animation'];
    Object.keys(opt).forEach(function (key) {
        if (notYetSupported.indexOf(key) >= 0) {
            throw new Error(("Sorry, the { " + key + " } option is not yet supported with update()."));
        }
    });
    var oldCanvas = this._settings.canvas;
    var oldContext = this._settings.context;
    for (var key in opt) {
        var value = opt[key];
        if (typeof value !== 'undefined') {
            this$1._settings[key] = value;
        }
    }
    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {
        var ref = this._setupCanvas(this._settings);
            var canvas = ref.canvas;
            var context = ref.context;
        this.props.canvas = canvas;
        this.props.context = context;
        this._setupGLKey();
        this._appendCanvasIfNeeded();
    }
    if (opt.p5 && typeof opt.p5 !== 'function') {
        this.props.p5 = opt.p5;
        this.props.p5.draw = (function () {
            if (this$1._isP5Resizing) 
                { return; }
            this$1._lastRedrawResult = this$1.submitDrawCall();
        });
    }
    this.resize();
    this.render();
    return this.props;
};
SketchManager.prototype._hasDimensions = function _hasDimensions () {
    var settings = this.settings;
    if (!settings.dimensions) 
        { return false; }
    if (typeof settings.dimensions === 'string') 
        { return true; }
    if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) 
        { return true; }
    return false;
};
SketchManager.prototype.resize = function resize () {
    var width, height;
    var styleWidth, styleHeight;
    var canvasWidth, canvasHeight;
    var settings = this.settings;
    var dimensions = settings.dimensions;
    var hasDimensions = this._hasDimensions();
    var exporting = this.props.exporting;
    var scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;
    var scaleToView = !exporting && hasDimensions ? settings.scaleToView : true;
    var units = settings.units;
    var pixelsPerInch = typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch) ? settings.pixelsPerInch : 72;
    var bleed = defined(settings.bleed, 0);
    var defaultPixelRatio = isBrowser() ? window.devicePixelRatio : 1;
    var pixelRatio = defined(settings.pixelRatio, defaultPixelRatio);
    if (typeof settings.maxPixelRatio === 'number') {
        pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);
    }
    if (!scaleToView) {
        pixelRatio = 1;
    }
    var defaultWidth = isBrowser() ? window.innerWidth : defaultNodeSize[0];
    var defaultHeight = isBrowser() ? window.innerHeight : defaultNodeSize[1];
    var parentWidth = defaultWidth;
    var parentHeight = defaultHeight;
    var trimWidth, trimHeight;
    if (hasDimensions) {
        var result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);
        var highest = Math.max(result[0], result[1]);
        var lowest = Math.min(result[0], result[1]);
        if (settings.orientation) {
            var landscape = settings.orientation === 'landscape';
            width = landscape ? highest : lowest;
            height = landscape ? lowest : highest;
        } else {
            width = result[0];
            height = result[1];
        }
        trimWidth = width;
        trimHeight = height;
        width += bleed * 2;
        height += bleed * 2;
    } else {
        width = parentWidth;
        height = parentHeight;
        trimWidth = width;
        trimHeight = height;
    }
    var realWidth = width;
    var realHeight = height;
    if (hasDimensions && units) {
        realWidth = convertDistance(width, units, 'px', pixelsPerInch);
        realHeight = convertDistance(height, units, 'px', pixelsPerInch);
    }
    styleWidth = Math.round(realWidth);
    styleHeight = Math.round(realHeight);
    if (scaleToFit && !exporting && hasDimensions) {
        var aspect = width / height;
        var windowAspect = parentWidth / parentHeight;
        var scaleToFitPadding = defined(settings.scaleToFitPadding, 40);
        var maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);
        var maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);
        if (styleWidth > maxWidth || styleHeight > maxHeight) {
            if (windowAspect > aspect) {
                styleHeight = maxHeight;
                styleWidth = Math.round(styleHeight * aspect);
            } else {
                styleWidth = maxWidth;
                styleHeight = Math.round(styleWidth / aspect);
            }
        }
    }
    var exportPixelRatio = 1;
    if (exporting) {
        exportPixelRatio = defined(settings.exportPixelRatio, hasDimensions ? 1 : pixelRatio);
        pixelRatio = exportPixelRatio;
    }
    canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(exportPixelRatio * realWidth);
    canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(exportPixelRatio * realHeight);
    var viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);
    var viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);
    var scaleX = canvasWidth / width;
    var scaleY = canvasHeight / height;
    Object.assign(this._props, {
        bleed: bleed,
        pixelRatio: pixelRatio,
        width: width,
        height: height,
        scaleX: scaleX,
        scaleY: scaleY,
        viewportWidth: viewportWidth,
        viewportHeight: viewportHeight,
        canvasWidth: canvasWidth,
        canvasHeight: canvasHeight,
        trimWidth: trimWidth,
        trimHeight: trimHeight,
        styleWidth: styleWidth,
        styleHeight: styleHeight
    });
    var canvas = this.props.canvas;
    if (canvas && settings.resizeCanvas !== false) {
        if (this.props.p5) {
            if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {
                this._isP5Resizing = true;
                this.props.p5.pixelDensity(pixelRatio);
                this.props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);
                this._isP5Resizing = false;
            }
        } else {
            if (canvas.width !== canvasWidth) 
                { canvas.width = canvasWidth; }
            if (canvas.height !== canvasHeight) 
                { canvas.height = canvasHeight; }
        }
        if (isBrowser()) {
            canvas.style.width = styleWidth + "px";
            canvas.style.height = styleHeight + "px";
        }
    }
    if (this.sketch && typeof this.sketch.resize === 'function') {
        this.sketch.resize(this.props);
    }
};
SketchManager.prototype.animate = function animate () {
    if (!this.props.playing) 
        { return; }
    if (!isBrowser()) {
        console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');
        return;
    }
    this._raf = window.requestAnimationFrame(this._animateHandler);
    var now = rightNow();
    var fps = this.props.fps;
    var frameIntervalMS = 1000 / fps;
    var deltaTimeMS = now - this._lastTime;
    var duration = this.props.duration;
    var hasDuration = typeof duration === 'number' && isFinite(duration);
    var isNewFrame = true;
    var playbackRate = this.settings.playbackRate;
    if (playbackRate === 'fixed') {
        deltaTimeMS = frameIntervalMS;
    } else if (playbackRate === 'throttle') {
        if (deltaTimeMS > frameIntervalMS) {
            now = now - deltaTimeMS % frameIntervalMS;
            this._lastTime = now;
        } else {
            isNewFrame = false;
        }
    } else {
        this._lastTime = now;
    }
    var deltaTime = deltaTimeMS / 1000;
    var newTime = this.props.time + deltaTime * this.props.timeScale;
    if (newTime < 0 && hasDuration) {
        newTime = duration + newTime;
    }
    var isFinished = false;
    var isLoopStart = false;
    var looping = this.settings.loop !== false;
    if (hasDuration && newTime >= duration) {
        if (looping) {
            isNewFrame = true;
            newTime = newTime % duration;
            isLoopStart = true;
        } else {
            isNewFrame = false;
            newTime = duration;
            isFinished = true;
        }
        this._signalEnd();
    }
    if (isNewFrame) {
        this.props.deltaTime = deltaTime;
        this.props.time = newTime;
        this.props.playhead = this._computePlayhead(newTime, duration);
        var lastFrame = this.props.frame;
        this.props.frame = this._computeCurrentFrame();
        if (isLoopStart) 
            { this._signalBegin(); }
        if (lastFrame !== this.props.frame) 
            { this.tick(); }
        this.render();
        this.props.deltaTime = 0;
    }
    if (isFinished) {
        this.pause();
    }
};
SketchManager.prototype.mount = function mount () {
    this._appendCanvasIfNeeded();
};
SketchManager.prototype.unmount = function unmount () {
    if (isBrowser()) {
        window.removeEventListener('resize', this._resizeHandler);
        window.removeEventListener('keydown', this._exportHandler);
    }
};
SketchManager.prototype._appendCanvasIfNeeded = function _appendCanvasIfNeeded () {
    if (!isBrowser()) 
        { return; }
    if (this.props.canvas && !this.props.canvas.parentElement) {
        var defaultParent = document.body;
        defaultParent.appendChild(this.props.canvas);
    }
};
SketchManager.prototype._createCanvas = function _createCanvas () {
    if (!isBrowser()) {
        throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');
    }
    return document.createElement('canvas');
};
SketchManager.prototype._setupCanvas = function _setupCanvas (settings) {
    var context, canvas;
    if (settings.canvas !== false) {
        context = settings.context;
        if (!context || typeof context === 'string') {
            var newCanvas = settings.canvas || this._createCanvas();
            var type = context || '2d';
            context = getCanvasContext(type, assign({}, settings.attributes, {
                canvas: newCanvas
            }));
            if (!context) {
                throw new Error(("Failed at canvas.getContext('" + type + "') - the browser may not support this context, or a different context may already be in use with this canvas."));
            }
        }
        canvas = context.canvas;
        if (settings.canvas && canvas !== settings.canvas) {
            throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');
        }
        if (settings.pixelated) {
            context.imageSmoothingEnabled = false;
            context.mozImageSmoothingEnabled = false;
            context.oImageSmoothingEnabled = false;
            context.webkitImageSmoothingEnabled = false;
            context.msImageSmoothingEnabled = false;
            canvas.style['image-rendering'] = 'pixelated';
        }
    }
    return {
        canvas: canvas,
        context: context
    };
};
SketchManager.prototype._setupGLKey = function _setupGLKey () {
    if (this.props.context) {
        if (isWebGLContext(this.props.context)) {
            this._props.gl = this.props.context;
        } else {
            delete this._props.gl;
        }
    }
};
SketchManager.prototype.setup = function setup (settings) {
        var this$1 = this;
        if ( settings === void 0 ) settings = {};

    if (this.sketch) 
        { throw new Error('Multiple setup() calls not yet supported.'); }
    this._settings = Object.assign({}, settings, this._settings);
    var ref = this._setupCanvas(this._settings);
        var context = ref.context;
        var canvas = ref.canvas;
    var duration = settings.duration;
    var totalFrames = settings.totalFrames;
    var timeScale = defined(settings.timeScale, 1);
    var fps = defined(settings.fps, 30);
    var hasDuration = typeof duration === 'number' && isFinite(duration);
    var hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);
    var totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;
    var durationFromTotalFrames = hasTotalFrames ? totalFrames / fps : undefined;
    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {
        throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');
    }
    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);
    duration = defined(duration, durationFromTotalFrames, Infinity);
    var startTime = settings.time;
    var startFrame = settings.frame;
    var hasStartTime = typeof startTime === 'number' && isFinite(startTime);
    var hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);
    var time = 0;
    var frame = 0;
    var playhead = 0;
    if (hasStartTime && hasStartFrame) {
        throw new Error('You should specify either start frame or time, but not both.');
    } else if (hasStartTime) {
        time = startTime;
        playhead = this._computePlayhead(time, duration);
        frame = this._computeFrame(playhead, time, totalFrames, fps);
    } else if (hasStartFrame) {
        frame = startFrame;
        time = frame / fps;
        playhead = this._computePlayhead(time, duration);
    }
    this._props = {
        canvas: canvas,
        context: context,
        fps: fps,
        frame: frame,
        time: time,
        deltaTime: 0,
        playhead: playhead,
        duration: duration,
        started: false,
        exporting: false,
        playing: false,
        recording: false,
        totalFrames: totalFrames,
        timeScale: timeScale,
        settings: this.settings,
        render: function () { return this$1.render(); },
        tick: function () { return this$1.tick(); },
        resize: function () { return this$1.resize(); },
        update: function (opt) { return this$1.update(opt); },
        exportFrame: function (opt) { return this$1.exportFrame(opt); },
        record: function () { return this$1.record(); },
        play: function () { return this$1.play(); },
        pause: function () { return this$1.pause(); },
        stop: function () { return this$1.stop(); }
    };
    this._setupGLKey();
    this.resize();
};
SketchManager.prototype.load = function load (createSketch) {
        var this$1 = this;

    if (typeof createSketch !== 'function') {
        throw new Error('The function must take in a function as the first parameter. Example:\n  canvasSketcher(() => { ... }, settings)');
    }
    this._preRender();
    var preload = Promise.resolve();
    if (this.settings.p5) {
        if (!isBrowser()) {
            throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');
        }
        preload = new Promise(function (resolve) {
            var P5Constructor = this$1.settings.p5;
            var preload;
            if (P5Constructor.p5) {
                preload = P5Constructor.preload;
                P5Constructor = P5Constructor.p5;
            }
            var p5Sketch = function (p5) {
                if (preload) 
                    { p5.preload = (function () { return preload(p5); }); }
                p5.setup = (function () {
                    var props = this$1.props;
                    var isGL = this$1.settings.context === 'webgl';
                    var renderer = isGL ? p5.WEBGL : p5.P2D;
                    p5.noLoop();
                    p5.pixelDensity(props.pixelRatio);
                    p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);
                    if (isGL && this$1.settings.attributes) {
                        p5.setAttributes(this$1.settings.attributes);
                    }
                    this$1.update({
                        p5: p5,
                        canvas: p5.canvas,
                        context: p5._renderer.drawingContext
                    });
                    resolve();
                });
            };
            if (typeof P5Constructor === 'function') {
                new P5Constructor(p5Sketch);
            } else {
                if (typeof window.createCanvas !== 'function') {
                    throw new Error("{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\nnew p5(); // <-- attaches to global scope");
                }
                p5Sketch(window);
            }
        });
    }
    return preload.then(function () {
        var loader = createSketch(this$1.props);
        if (!isPromise(loader)) {
            loader = Promise.resolve(loader);
        }
        return loader;
    }).then(function (sketch) {
        if (!sketch) 
            { sketch = {}; }
        this$1._sketch = sketch;
        if (isBrowser()) {
            window.addEventListener('keydown', this$1._exportHandler);
            window.addEventListener('resize', this$1._resizeHandler);
        }
        this$1._postRender();
        if (typeof this$1._sketch.resize === 'function') {
            this$1.sketch.resize(this$1.props);
        }
    }).catch(function (err) {
        console.warn('Could not start sketch, the async loading function rejected with an error:\n    Error: ' + err.message);
        throw err;
    });
};

Object.defineProperties( SketchManager.prototype, prototypeAccessors );
function canvasSketch(sketch, settings) {
    if ( settings === void 0 ) settings = {};

    if (settings.p5) {
        if (settings.canvas || settings.context && typeof settings.context !== 'string') {
            throw new Error("In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string");
        }
        var context = typeof settings.context === 'string' ? settings.context : false;
        settings = Object.assign({}, settings, {
            canvas: false,
            context: context
        });
    }
    var manager = new SketchManager();
    if (sketch) {
        manager.setup(settings);
        manager.mount();
        return manager.load(sketch).then(function () {
            manager.run();
            return manager;
        });
    }
    return Promise.resolve(manager);
}

export default canvasSketch;
export { paperSizes as PaperSize };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
